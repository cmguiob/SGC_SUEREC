"wesanderson", #paleta de colores
"qs" #escribir y leer rápidamente objetos R
)
)
#Paleta de colores
pal <- wes_palette("Zissou1", 100, type = "continuous")
# Ajusta tamaño de letra para las gráficas que genere el script
theme(base_size = 14)
poli_estudio <- sf::st_read(here::here("Data", "poligono_tocaima.geojson"))
poli_estudio <- sf::st_read(here::here("Perfiles_SoilGrids","Data", "poligono_tocaima.geojson"))
poli_ucs_cundinamarca <- sf::st_read(here::here("Perfiles_SoilGrids", "Data", "S_CUNDINAMARCA", "S_CUNDINAMARCA_100K.shp"))
poli_tolima <- sf::st_read(here::here("Perfiles_SoilGrids", "Data", "S_TOLIMA", "S_TOLIMA_100K.shp"))
# Verifica CRS
st_crs(poli_estudio)
st_crs(poli_ucs_cundinamarca)
st_crs(poli_tolima)
# Unifica el CRS (ejemplo: al CRS del polígono de estudio)
crs_target <- st_crs(poli_estudio)
poli_ucs_cundinamarca <- st_transform(poli_ucs_cundinamarca, crs_target)
poli_tolima <- st_transform(poli_tolima, crs_target)
poli_ucs_tolima <- sf::st_read(here::here("Perfiles_SoilGrids", "Data", "S_TOLIMA", "S_TOLIMA_100K.shp"))
st_crs(poli_ucs_tolima)
poli_ucs_tolima <- st_transform(poli_ucs_tolima, crs_target)
# Une los dos dataframes de UMS (debe tener mismos nombres de columnas)
poli_ucs <- rbind(poli_ucs_cundinamarca, poli_ucs_tolima)
source(here::here("Scripts", "00_funcion_descarga_ucs_armonizadas_gpkg.R"), encoding = "UTF-8")
# Para cargar librerias se verifica pacman
if ("pacman" %in% installed.packages() == FALSE) install.packages("pacman")
# Se cargan las librerias
pacman::p_load(char = c(
"here", #manejo de rutas
"sf", #manipulación de dats espaciales
"dplyr", #procesamiento de data frames
"aqp", #datos de suelos
"ggplot2",  #graficación
"patchwork", #mosaicos gráficos
"wesanderson", #paleta de colores
"qs" #escribir y leer rápidamente objetos R
)
)
#Paleta de colores
pal <- wes_palette("Zissou1", 100, type = "continuous")
# Ajusta tamaño de letra para las gráficas que genere el script
theme(base_size = 14)
poli_estudio <- sf::st_read(here::here("Perfiles_SoilGrids","Data", "poligono_tocaima.geojson"))
getwd()
source(here::here("00_funcion_descarga_ucs_armonizadas_gpkg.R"), encoding = "UTF-8")
source(here::here("Perfiles_SoilGrids","Scripts", "00_funcion_descarga_ucs_armonizadas_gpkg.R"), encoding = "UTF-8")
View(ucs_sf)
# Descarga polígono de área de estudio
poli_estudio <- sf::st_read(here::here("Perfiles_SoilGrids","Data", "poligono_tocaima.geojson"))
# Selecciona columnas y filas relevantes
poli_ucs_filtradas <- ucs_sf  |>
dplyr::select(UCSuelo, SUBGRUPO, PERFILES, PORCENTAJE, AREA_HA)
# Verifica CRS
st_crs(poli_estudio)
st_crs(poli_ucs_filtradas)
# Unifica el CRS (ejemplo: al CRS del polígono de estudio)
crs_target <- st_crs(poli_estudio)
poli_ucs_filtradas <- st_transform(poli_ucs_filtradas, crs_target)
# Realiza el clip/intersección espacial
estudio_ucs_clip <- st_intersection(poli_ucs_filtradas, poli_estudio)
poli_ucs_filtradas <- st_transform(poli_ucs_filtradas, crs_target) |>
sf::st_make_valid()
# Realiza el clip/intersección espacial
estudio_ucs_clip <- st_intersection(poli_ucs_filtradas, poli_estudio)
# Elimina geometrías vacías (por si acaso)
estudio_ucs_clip <- estudio_ucs_clip[!st_is_empty(estudio_ucs_clip), ]
# Chequea que no se pierdan los atributos clave (por ejemplo el ID de la UMS)
head(estudio_ucs_clip)
#Verifica visualmente
plot(estudio_ucs_clip)
# Crea un objeto tipo función al ejecutar un  script externo
source("00_funcion_descarga_soilgrids.R")
# Se llama la función con los argumentos adaptados al proyecto
stack_suelo_medias <- descargar_soilgrids_stack(
vars = c("sand", "silt", "clay", "soc"),
depths = c("0-5cm", "5-15cm", "15-30cm", "60-100cm", "100-200cm"),
stats = c("mean"),
resolucion = c(250, 250)
)
# 1. Validación
names(stack_suelo_medias)  # Nombres de las capas
# Exportar stack original (sin normalizar) como .tif local
out_raster <- here("Perfiles_SoilGrids", "Data", "OUT_soilgrids_stack_raw.tif")
writeRaster(stack_suelo_medias, filename = out_raster, overwrite = TRUE)
# Lee desde .tif (esto evita los errores de proyección remota)
stack_suelo_tif <- rast(out_raster)
plot(stack_suelo_tif[[1]])
plot(stack_suelo_medias[1])
plot(stack_suelo_medias[[1]])
# Extrae el CRS objetivo (de las UMS)
crs_esrtudio_ucs <- st_crs(estudio_ucs_clip)$wkt
# Reproyecta el stack al CRS de las UCS
stack_proj <- terra::project(stack_suelo_medias, crs_esrtudio_ucs, method = "bilinear")
# Selecciona una sola capa para el ejemplo
r <- stack_suelo_medias[[1]]
# Materializa en disco: descarga local como .tif (usa writeRaster)
writeRaster(r, filename = "temp_local.tif", overwrite = TRUE)
names(stack_suelo_medias_ok)
keep <- sapply(1:nlyr(stack_suelo_medias), function(i) {
r <- stack_suelo_medias[[i]]
vals <- try(values(r), silent = TRUE)
if(inherits(vals, "try-error")) return(FALSE)
!all(is.na(vals))
})
stack_suelo_medias_ok <- stack_suelo_medias[[keep]]
descargar_soilgrids_stack2 <- function(vars = c("sand", "bdod"),
depths = c("0-5cm", "15-30cm"),
stats = c("mean"),
resolucion = c(250, 250)) {
if (!"pacman" %in% installed.packages()[, "Package"]) install.packages("pacman")
pacman::p_load("terra", "gdalUtilities")
vars_validas <- c("bdod", "cec", "cfvo", "clay", "silt", "sand", "nitrogen", "ocd", "ocs", "soc", "phh2o")
depths_validas <- c("0-5cm", "5-15cm", "15-30cm", "30-60cm", "60-100cm", "100-200cm")
stats_validos  <- c("mean", "uncertainty", "Q0.05", "Q0.5", "Q0.95")
if (!all(vars %in% vars_validas)) {
warning("Una o más variables no coinciden con la lista de referencia común de SoilGrids.")
}
if (!all(depths %in% depths_validas)) stop("Profundidades inválidas. Usa: ", paste(depths_validas, collapse = ", "))
if (!all(stats %in% stats_validos)) stop("Valores estadísticos inválidos. Usa: ", paste(stats_validos, collapse = ", "))
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
capas <- list()
for (v in vars) {
for (d in depths) {
for (s in stats) {
capa <- paste0(v, "_", d, "_", s)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
tif_local  <- file.path(tempdir(), paste0(capa, ".tif"))
message("Descargando y materializando: ", capa)
# Crea archivo GTiff local
result <- try({
gdal_translate(
src_dataset = vrt_remote,
dst_dataset = tif_local,
of = "GTiff",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
}, silent = TRUE)
# Lee raster materializado y añade al stack
r <- try(terra::rast(tif_local), silent = TRUE)
if (!inherits(r, "try-error")) {
names(r) <- capa
capas[[capa]] <- r
} else {
warning("No se pudo leer la capa (posible error de descarga): ", capa)
}
}
}
}
if (length(capas) == 0) stop("No se pudo cargar ninguna capa válida.")
return(terra::rast(capas))
}
stack_suelo_medias <- descargar_soilgrids_stack2(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
resolucion = c(250, 250)
)
descargar_soilgrids_wcs <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SoilGrids_WCS") {
# Requiere gdalUtilities y glue
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
# Loop principal
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/soilgrids.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=image/tiff",
"&SUBSET=long({bbox[1]},{bbox[3]})",
"&SUBSET=lat({bbox[2]},{bbox[4]})"
)
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff",
verbose = TRUE
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/soilgrids.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=image/tiff",
"&SUBSET=long({bbox[1]},{bbox[3]})",
"&SUBSET=lat({bbox[2]},{bbox[4]})"
)
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
# End point CORRECTO: cada variable tiene su propio .map
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=long({bbox[1]},{bbox[3]})",
"&SUBSET=lat({bbox[2]},{bbox[4]})",
"&SUBSETTINGCRS=urn:ogc:def:crs:EPSG::4326",
"&OUTPUTCRS=urn:ogc:def:crs:EPSG::4326"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7),
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=long({bbox[1]},{bbox[3]})",
"&SUBSET=lat({bbox[2]},{bbox[4]})",
"&SUBSETTINGCRS=urn:ogc:def:crs:EPSG::4326",
"&OUTPUTCRS=urn:ogc:def:crs:EPSG::4326"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs_igh <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_igh = c(-8800000, -500000, -7400000, 1400000), # xmin, ymin, xmax, ymax en IGH
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=X({bbox_igh[1]},{bbox_igh[3]})",
"&SUBSET=Y({bbox_igh[2]},{bbox_igh[4]})",
"&SUBSETTINGCRS=http://www.opengis.net/def/crs/EPSG/0/54052",
"&OUTPUTCRS=http://www.opengis.net/def/crs/EPSG/0/54052"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs_igh(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_igh = c(-8800000, -500000, -7400000, 1400000), # Colombia ejemplo IGH
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs_igh <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_igh = c(-8800000, -500000, -7400000, 1400000), # xmin, ymin, xmax, ymax en IGH
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
# Asegura que los valores NO están en notación científica
bbox_fmt <- formatC(bbox_igh, format = "f", digits = 0)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=X({bbox_fmt[1]},{bbox_fmt[3]})",
"&SUBSET=Y({bbox_fmt[2]},{bbox_fmt[4]})",
"&SUBSETTINGCRS=http://www.opengis.net/def/crs/EPSG/0/54052",
"&OUTPUTCRS=http://www.opengis.net/def/crs/EPSG/0/54052"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs_igh(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_igh = c(-8800000, -500000, -7400000, 1400000), # IGH Colombia
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs_wgs <- function(vars, depths, stats,
bbox_wgs, res = 250, out_dir = "SG_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
bbox_fmt <- formatC(bbox_wgs, format = "f", digits = 6)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=long({bbox_fmt[1]},{bbox_fmt[3]})",
"&SUBSET=lat({bbox_fmt[2]},{bbox_fmt[4]})",
"&SUBSETTINGCRS=urn:ogc:def:crs:EPSG::4326",
"&OUTPUTCRS=urn:ogc:def:crs:EPSG::4326"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs_wgs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_wgs = c(-74.6, 4.5, -74.4, 4.7),
res = 250,
out_dir = "SG_WCS"
)
