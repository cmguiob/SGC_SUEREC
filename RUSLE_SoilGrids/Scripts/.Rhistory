source(here("RUSLE_SoilGrids", "Scripts", "00_funcion_descarga_soilgrids.R"))
stack_soil <- descargar_soilgrids_stack(
vars = c("sand", "silt", "clay", "soc", "bdod"),
depths = c("0-5cm"),
stats = c("mean"),
resolucion = c(250, 250),
ruta_vrt = here("RUSLE_SoilGrids", "Data", "OUT_SoilGrids_vrt")
)
# Detectar automáticamente si se usará el DEM como referencia
usar_raster <- exists("dem")
if (usar_raster) {
message("Usando raster DEM como referencia espacial.")
# 1. Convertir la extensión del DEM a polígono y transformarla al CRS de SoilGrids (IGH)
dem_bbox_vect <- as.polygons(ext(dem)) |> st_as_sf()
dem_bbox_proj <- st_transform(dem_bbox_vect, wkt_igh) |> vect()
# 2. Recortar el stack de SoilGrids a esa extensión (en su CRS nativo)
stack_soil_crop <- crop(stack_soil, dem_bbox_proj)
# 3. Reproyectar y alinear el stack al raster DEM
stack_soil_proj <- project(stack_soil_crop, crs(dem), method = "bilinear")
stack_soil_ready <- resample(stack_soil_proj, dem, method = "bilinear")
} else {
message("Usando polígono como referencia espacial.")
# 1. Asegurar que el polígono esté transformado al CRS de SoilGrids (IGH)
poli_estudio_igh <- st_transform(poli_estudio, wkt_igh)
poli_estudio_vect <- vect(poli_estudio_igh)
# 2. Recortar el stack de SoilGrids con el polígono (en su CRS nativo)
stack_soil_crop <- crop(stack_soil, poli_estudio_vect)
# 3. Reproyectar el stack al CRS original del polígono (ej. MAGNA-SIRGAS zona Bogotá)
crs_poli <- st_crs(poli_estudio)$wkt
stack_soil_proj <- project(stack_soil_crop, crs_poli, method = "bilinear")
# 4. Aplicar máscara con el polígono para mantener solo el área de interés
stack_soil_ready <- mask(stack_soil_proj, vect(poli_estudio))
}
# Definir proyección homogénea usada por SoilGrids (IGH = Homosínclinal Mundial)
wkt_igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Detectar automáticamente si se usará el DEM como referencia
usar_raster <- exists("dem")
if (usar_raster) {
message("Usando raster DEM como referencia espacial.")
# 1. Convertir la extensión del DEM a polígono y transformarla al CRS de SoilGrids (IGH)
dem_bbox_vect <- as.polygons(ext(dem)) |> st_as_sf()
dem_bbox_proj <- st_transform(dem_bbox_vect, wkt_igh) |> vect()
# 2. Recortar el stack de SoilGrids a esa extensión (en su CRS nativo)
stack_soil_crop <- crop(stack_soil, dem_bbox_proj)
# 3. Reproyectar y alinear el stack al raster DEM
stack_soil_proj <- project(stack_soil_crop, crs(dem), method = "bilinear")
stack_soil_ready <- resample(stack_soil_proj, dem, method = "bilinear")
} else {
message("Usando polígono como referencia espacial.")
# 1. Asegurar que el polígono esté transformado al CRS de SoilGrids (IGH)
poli_estudio_igh <- st_transform(poli_estudio, wkt_igh)
poli_estudio_vect <- vect(poli_estudio_igh)
# 2. Recortar el stack de SoilGrids con el polígono (en su CRS nativo)
stack_soil_crop <- crop(stack_soil, poli_estudio_vect)
# 3. Reproyectar el stack al CRS original del polígono (ej. MAGNA-SIRGAS zona Bogotá)
crs_poli <- st_crs(poli_estudio)$wkt
stack_soil_proj <- project(stack_soil_crop, crs_poli, method = "bilinear")
# 4. Aplicar máscara con el polígono para mantener solo el área de interés
stack_soil_ready <- mask(stack_soil_proj, vect(poli_estudio))
}
# Extraer y convertir unidades
sand <- stack_soil_crop[["sand_0-5cm_mean"]] / 10  # g/kg → %
silt <- stack_soil_crop[["silt_0-5cm_mean"]] / 10
clay <- stack_soil_crop[["clay_0-5cm_mean"]] / 10
soc  <- stack_soil_crop[["soc_0-5cm_mean"]] / 10  # dg/kg → %
bd   <- stack_soil_crop[["bdod_0-5cm_mean"]] / 100  # cg/cm³ → g/cm³
# Materia orgánica a partir de SOC
om <- soc * 1.724
# Extraer y convertir unidades
sand <- stack_soil_ready[["sand_0-5cm_mean"]] / 10  # g/kg → %
silt <- stack_soil_ready[["silt_0-5cm_mean"]] / 10
clay <- stack_soil_ready[["clay_0-5cm_mean"]] / 10
soc  <- stack_soil_ready[["soc_0-5cm_mean"]] / 10  # dg/kg → %
bd   <- stack_soil_ready[["bdod_0-5cm_mean"]] / 100  # cg/cm³ → g/cm³
# Materia orgánica a partir de SOC
om <- soc * 1.724
# Diámetro medio de cada fracción (μm): arena=1000, limo=26, arcilla=1
log_dg <- (sand * log(1000) + silt * log(26) + clay * log(1)) / 100
dg <- exp(log_dg)
K_renard <- 0.0034 + 0.0405 * exp(-0.5 * ((log(dg) + 1.659) / 0.7101)^2)
plot(K_renard)
writeRaster(K_renard, here::here("RUSLE_SoilGrids", "Scripts", "K_renard_dg.tif"), overwrite = TRUE)
M <- (silt + sand) * (100 - clay)
K_denardin <- 0.0134 + 0.0027 * M / 10000 - 0.00001 * M^2 / 1e8
plot(K_denardin)
writeRaster(K_denardin, here::here("RUSLE_SoilGrids", "Scripts", "K_denardin.tif"), overwrite = TRUE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(
here,     # manejo de rutas relativas
sf,       # lectura y transformación de vectores espaciales (polígonos)
terra,    # manipulación de rasteres y análisis espacial
dplyr,    # manipulación de data frames y tuberías
tidyr,    # transformación entre formato ancho/largo
ggplot2   # visualización de datos (gráficas)
)
dem <- rast(here("RUSLE_SoilGrids", "Data", "INP_dem_rio_barbas_burnt_fill_3116.tif"))
# Extraer propiedades clave del DEM
dem_crs <- crs(dem)
dem_ext <- ext(dem)
dem_res <- res(dem)
# Usamos función externa para descarga vía GDAL
source(here("RUSLE_SoilGrids", "Scripts", "00_funcion_descarga_soilgrids.R"))
stack_soil <- descargar_soilgrids_stack(
vars = c("sand", "silt", "clay", "soc", "bdod"),
depths = c("0-5cm"),
stats = c("mean"),
resolucion = c(250, 250),
ruta_vrt = here("RUSLE_SoilGrids", "Data", "OUT_SoilGrids_vrt")
)
# Definir proyección homogénea usada por SoilGrids (IGH = Homosínclinal Mundial)
wkt_igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Detectar automáticamente si se usará el DEM como referencia
usar_raster <- exists("dem")
if (usar_raster) {
message("Usando raster DEM como referencia espacial.")
# 1. Convertir la extensión del DEM a polígono y transformarla al CRS de SoilGrids (IGH)
dem_bbox_vect <- as.polygons(ext(dem)) |> st_as_sf()
dem_bbox_proj <- st_transform(dem_bbox_vect, wkt_igh) |> vect()
# 2. Recortar el stack de SoilGrids a esa extensión (en su CRS nativo)
stack_soil_crop <- crop(stack_soil, dem_bbox_proj)
# 3. Reproyectar y alinear el stack al raster DEM
stack_soil_proj <- project(stack_soil_crop, crs(dem), method = "bilinear")
stack_soil_ready <- resample(stack_soil_proj, dem, method = "bilinear")
} else {
message("Usando polígono como referencia espacial.")
# 1. Asegurar que el polígono esté transformado al CRS de SoilGrids (IGH)
poli_estudio_igh <- st_transform(poli_estudio, wkt_igh)
poli_estudio_vect <- vect(poli_estudio_igh)
# 2. Recortar el stack de SoilGrids con el polígono (en su CRS nativo)
stack_soil_crop <- crop(stack_soil, poli_estudio_vect)
# 3. Reproyectar el stack al CRS original del polígono (ej. MAGNA-SIRGAS zona Bogotá)
crs_poli <- st_crs(poli_estudio)$wkt
stack_soil_proj <- project(stack_soil_crop, crs_poli, method = "bilinear")
# 4. Aplicar máscara con el polígono para mantener solo el área de interés
stack_soil_ready <- mask(stack_soil_proj, vect(poli_estudio))
}
# Definir proyección homogénea usada por SoilGrids (IGH = Homosínclinal Mundial)
wkt_igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Detectar automáticamente si se usará el DEM como referencia
usar_raster <- exists("dem")
if (usar_raster) {
message("Usando raster DEM como referencia espacial.")
# 1. Extraer la extensión del DEM como polígono y asignar CRS del DEM
dem_bbox_vect <- as.polygons(ext(dem))
crs(dem_bbox_vect) <- crs(dem)  # Importante: asignar CRS explícitamente
# 2. Transformar la geometría de bbox al CRS nativo de SoilGrids (IGH)
dem_bbox_sf   <- st_as_sf(dem_bbox_vect)
dem_bbox_proj <- st_transform(dem_bbox_sf, wkt_igh) |> vect()
# 3. Recortar el stack de SoilGrids a esa extensión (en su CRS nativo)
stack_soil_crop <- crop(stack_soil, dem_bbox_proj)
# 4. Reproyectar y alinear el stack al raster DEM
stack_soil_proj <- project(stack_soil_crop, crs(dem), method = "bilinear")
stack_soil_ready <- resample(stack_soil_proj, dem, method = "bilinear")
} else {
message("Usando polígono como referencia espacial.")
# 1. Asegurar que el polígono esté transformado al CRS de SoilGrids (IGH)
poli_estudio_igh  <- st_transform(poli_estudio, wkt_igh)
poli_estudio_vect <- vect(poli_estudio_igh)
# 2. Recortar el stack de SoilGrids con el polígono (en su CRS nativo)
stack_soil_crop <- crop(stack_soil, poli_estudio_vect)
# 3. Reproyectar el stack al CRS original del polígono (ej. MAGNA-SIRGAS zona Bogotá)
crs_poli <- st_crs(poli_estudio)$wkt
stack_soil_proj <- project(stack_soil_crop, crs_poli, method = "bilinear")
# 4. Aplicar máscara con el polígono para mantener solo el área de interés
stack_soil_ready <- mask(stack_soil_proj, vect(poli_estudio))
}
# Extraer y convertir unidades
sand <- stack_soil_ready[["sand_0-5cm_mean"]] / 10  # g/kg → %
silt <- stack_soil_ready[["silt_0-5cm_mean"]] / 10
clay <- stack_soil_ready[["clay_0-5cm_mean"]] / 10
soc  <- stack_soil_ready[["soc_0-5cm_mean"]] / 10  # dg/kg → %
bd   <- stack_soil_ready[["bdod_0-5cm_mean"]] / 100  # cg/cm³ → g/cm³
# Materia orgánica a partir de SOC
om <- soc * 1.724
# Diámetro medio de cada fracción (μm): arena=1000, limo=26, arcilla=1
log_dg <- (sand * log(1000) + silt * log(26) + clay * log(1)) / 100
dg <- exp(log_dg)
K_renard <- 0.0034 + 0.0405 * exp(-0.5 * ((log(dg) + 1.659) / 0.7101)^2)
plot(K_renard)
writeRaster(K_renard, here::here("RUSLE_SoilGrids", "Scripts", "OUT_K_renard_dg.tif"), overwrite = TRUE)
M <- (silt + sand) * (100 - clay)
K_denardin <- 0.0134 + 0.0027 * M / 10000 - 0.00001 * M^2 / 1e8
plot(K_denardin)
writeRaster(K_denardin, here::here("RUSLE_SoilGrids", "Scripts", "OUT_K_denardin.tif"), overwrite = TRUE)
# Subecuaciones según Anache et al. (2015), adaptadas de Sharpley & Williams
fcsand <- 0.2 + 0.3 * exp(-0.0256 * sand * (1 - silt / 100))
sl_clay <- silt / (clay + silt)
om_term <- 1 - 0.25 * om / (om + exp(3.72 - 2.95 * om))
K_sw <- fcsand * sl_clay^0.3 * om_term
# Conversión a unidades SI
K_sw_SI <- K_sw * 0.1317
plot(K_sw_SI)
writeRaster(K_sw_SI, here::here("RUSLE_SoilGrids", "Scripts","OUT_K_sharpley_williams.tif"), overwrite = TRUE)
dem <- rast(here("RUSLE_SoilGrids", "Data", "INP_dem_rio_barbas_burnt_fill_3116.tif"))
# Extraer propiedades clave del DEM
dem_crs <- crs(dem)
dem_ext <- ext(dem)
dem_res <- res(dem)
plot(dem)
## 4. Recorte y verificación del stack de SoilGrids (previo a reproyección)
# Definir proyección IGH usada por SoilGrids (Homosínclinal Mundial)
wkt_igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Detectar automáticamente si se usará el DEM como referencia
usar_raster <- exists("dem")
if (usar_raster) {
message("Usando raster DEM como referencia espacial.")
# 1. Extraer la extensión del DEM como polígono y asignar CRS explícitamente
dem_bbox_vect <- as.polygons(ext(dem))
crs(dem_bbox_vect) <- crs(dem)
# 2. Transformar bbox al CRS de SoilGrids (IGH)
dem_bbox_sf   <- st_as_sf(dem_bbox_vect)
dem_bbox_proj <- st_transform(dem_bbox_sf, wkt_igh) |> vect()
# 3. Recorte preliminar del stack de SoilGrids (sin reproyectar aún)
stack_soil_crop <- crop(stack_soil, dem_bbox_proj)
} else {
message("Usando polígono como referencia espacial.")
# 1. Transformar el polígono al CRS de SoilGrids (IGH)
poli_estudio_igh  <- st_transform(poli_estudio, wkt_igh)
poli_estudio_vect <- vect(poli_estudio_igh)
# 2. Recorte preliminar del stack de SoilGrids (sin reproyectar aún)
stack_soil_crop <- crop(stack_soil, poli_estudio_vect)
}
# Verificar presencia de NA internos antes de reproyección
na_resumen <- global(is.na(stack_soil_crop), "sum", na.rm = FALSE)
print("Celdas NA por capa antes de reproyección:")
print(na_resumen)
# Visualizar una capa de textura para inspección visual
plot(stack_soil_crop[["sand_0-5cm_mean"]], main = "Sand (antes de reproyección)")
rm(list=ls())
# Cargar polígono geojson
poli_estudio <- st_read(here("RUSLE_SoilGrids", "Data", "INP_cuenca_rio_barbas_3116.geojson"))
# Usamos función externa para descarga vía GDAL
source(here("RUSLE_SoilGrids", "Scripts", "00_funcion_descarga_soilgrids.R"))
stack_soil <- descargar_soilgrids_stack(
vars = c("sand", "silt", "clay", "soc", "bdod"),
depths = c("0-5cm"),
stats = c("mean"),
resolucion = c(250, 250),
ruta_vrt = here("RUSLE_SoilGrids", "Data", "OUT_SoilGrids_vrt")
)
## 4. Recorte y verificación del stack de SoilGrids (previo a reproyección)
# Definir proyección IGH usada por SoilGrids (Homosínclinal Mundial)
wkt_igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Detectar automáticamente si se usará el DEM como referencia
usar_raster <- exists("dem")
if (usar_raster) {
message("Usando raster DEM como referencia espacial.")
# 1. Extraer la extensión del DEM como polígono y asignar CRS explícitamente
dem_bbox_vect <- as.polygons(ext(dem))
crs(dem_bbox_vect) <- crs(dem)
# 2. Transformar bbox al CRS de SoilGrids (IGH)
dem_bbox_sf   <- st_as_sf(dem_bbox_vect)
dem_bbox_proj <- st_transform(dem_bbox_sf, wkt_igh) |> vect()
# 3. Recorte preliminar del stack de SoilGrids (sin reproyectar aún)
stack_soil_crop <- crop(stack_soil, dem_bbox_proj)
} else {
message("Usando polígono como referencia espacial.")
# 1. Transformar el polígono al CRS de SoilGrids (IGH)
poli_estudio_igh  <- st_transform(poli_estudio, wkt_igh)
poli_estudio_vect <- vect(poli_estudio_igh)
# 2. Recorte preliminar del stack de SoilGrids (sin reproyectar aún)
stack_soil_crop <- crop(stack_soil, poli_estudio_vect)
}
# Verificar presencia de NA internos antes de reproyección
na_resumen <- global(is.na(stack_soil_crop), "sum", na.rm = FALSE)
print("Celdas NA por capa antes de reproyección:")
print(na_resumen)
# Visualizar una capa de textura para inspección visual
plot(stack_soil_crop[["sand_0-5cm_mean"]], main = "Sand (antes de reproyección)")
## 4b. Reproyección y alineación (solo si se validó el stack recortado)
if (usar_raster) {
# Reproyectar al CRS del DEM y alinear resolución y grilla
stack_soil_proj  <- project(stack_soil_crop, crs(dem), method = "bilinear")
stack_soil_ready <- resample(stack_soil_proj, dem, method = "bilinear")
} else {
crs_poli <- st_crs(poli_estudio)$wkt
stack_soil_proj <- project(stack_soil_crop, crs_poli, method = "bilinear")
stack_soil_ready <- mask(stack_soil_proj, vect(poli_estudio))
}
# Extraer y convertir unidades
sand <- stack_soil_ready[["sand_0-5cm_mean"]] / 10  # g/kg → %
silt <- stack_soil_ready[["silt_0-5cm_mean"]] / 10
clay <- stack_soil_ready[["clay_0-5cm_mean"]] / 10
soc  <- stack_soil_ready[["soc_0-5cm_mean"]] / 10  # dg/kg → %
bd   <- stack_soil_ready[["bdod_0-5cm_mean"]] / 100  # cg/cm³ → g/cm³
# Materia orgánica a partir de SOC
om <- soc * 1.724
# Diámetro medio de cada fracción (μm): arena=1000, limo=26, arcilla=1
log_dg <- (sand * log(1000) + silt * log(26) + clay * log(1)) / 100
dg <- exp(log_dg)
K_renard <- 0.0034 + 0.0405 * exp(-0.5 * ((log(dg) + 1.659) / 0.7101)^2)
plot(K_renard)
writeRaster(K_renard, here::here("RUSLE_SoilGrids", "Scripts", "OUT_K_renard_dg.tif"), overwrite = TRUE)
rm(list = lsd())
mr(list = ls())
rm(list=ls())
dem <- rast(here("RUSLE_SoilGrids", "Data", "INP_dem_rio_barbas_burnt_fill_3116.tif"))
# Extraer propiedades clave del DEM
dem_crs <- crs(dem)
dem_ext <- ext(dem)
dem_res <- res(dem)
plot(dem)
# Usamos función externa para descarga vía GDAL
source(here("RUSLE_SoilGrids", "Scripts", "00_funcion_descarga_soilgrids.R"))
stack_soil <- descargar_soilgrids_stack(
vars = c("sand", "silt", "clay", "soc", "bdod"),
depths = c("0-5cm"),
stats = c("mean"),
resolucion = c(250, 250),
ruta_vrt = here("RUSLE_SoilGrids", "Data", "OUT_SoilGrids_vrt")
)
## 4. Recorte y verificación del stack de SoilGrids (previo a reproyección)
# Definir proyección IGH usada por SoilGrids (Homosínclinal Mundial)
wkt_igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Detectar automáticamente si se usará el DEM como referencia
usar_raster <- exists("dem")
if (usar_raster) {
message("Usando raster DEM como referencia espacial.")
# 1. Extraer la extensión del DEM como polígono y asignar CRS explícitamente
dem_bbox_vect <- as.polygons(ext(dem))
crs(dem_bbox_vect) <- crs(dem)
# 2. Transformar bbox al CRS de SoilGrids (IGH)
dem_bbox_sf   <- st_as_sf(dem_bbox_vect)
dem_bbox_proj <- st_transform(dem_bbox_sf, wkt_igh) |> vect()
# 3. Recorte preliminar del stack de SoilGrids (sin reproyectar aún)
stack_soil_crop <- crop(stack_soil, dem_bbox_proj)
} else {
message("Usando polígono como referencia espacial.")
# 1. Transformar el polígono al CRS de SoilGrids (IGH)
poli_estudio_igh  <- st_transform(poli_estudio, wkt_igh)
poli_estudio_vect <- vect(poli_estudio_igh)
# 2. Recorte preliminar del stack de SoilGrids (sin reproyectar aún)
stack_soil_crop <- crop(stack_soil, poli_estudio_vect)
}
# Verificar presencia de NA internos antes de reproyección
na_resumen <- global(is.na(stack_soil_crop), "sum", na.rm = FALSE)
print("Celdas NA por capa antes de reproyección:")
print(na_resumen)
# Visualizar una capa de textura para inspección visual
plot(stack_soil_crop[["sand_0-5cm_mean"]], main = "Sand (antes de reproyección)")
## 4b. Reproyección y alineación (solo si se validó el stack recortado)
if (usar_raster) {
# Reproyectar al CRS del DEM y alinear resolución y grilla
stack_soil_proj  <- project(stack_soil_crop, crs(dem), method = "bilinear")
stack_soil_ready <- resample(stack_soil_proj, dem, method = "bilinear")
} else {
crs_poli <- st_crs(poli_estudio)$wkt
stack_soil_proj <- project(stack_soil_crop, crs_poli, method = "bilinear")
stack_soil_ready <- mask(stack_soil_proj, vect(poli_estudio))
}
# Extraer y convertir unidades
sand <- stack_soil_ready[["sand_0-5cm_mean"]] / 10  # g/kg → %
silt <- stack_soil_ready[["silt_0-5cm_mean"]] / 10
clay <- stack_soil_ready[["clay_0-5cm_mean"]] / 10
soc  <- stack_soil_ready[["soc_0-5cm_mean"]] / 10  # dg/kg → %
bd   <- stack_soil_ready[["bdod_0-5cm_mean"]] / 100  # cg/cm³ → g/cm³
# Materia orgánica a partir de SOC
om <- soc * 1.724
# Diámetro medio de cada fracción (μm): arena=1000, limo=26, arcilla=1
log_dg <- (sand * log(1000) + silt * log(26) + clay * log(1)) / 100
dg <- exp(log_dg)
K_renard <- 0.0034 + 0.0405 * exp(-0.5 * ((log(dg) + 1.659) / 0.7101)^2)
plot(K_renard)
writeRaster(K_renard, here::here("RUSLE_SoilGrids", "Scripts", "OUT_K_renard_dg.tif"), overwrite = TRUE)
# Diámetro medio de cada fracción (μm): arena=1000, limo=26, arcilla=1
log_dg <- (sand * log(1000) + silt * log(26) + clay * log(1)) / 100
dg <- exp(log_dg)
K_renard <- 0.0034 + 0.0405 * exp(-0.5 * ((log(dg) + 1.659) / 0.7101)^2)
plot(K_renard)
writeRaster(K_renard, here::here("RUSLE_SoilGrids", "Scripts", "OUT_K_renard_dg.tif"), overwrite = TRUE)
# Diámetro medio de cada fracción (μm): arena=1000, limo=26, arcilla=1
log_dg <- (sand * log(1000) + silt * log(26) + clay * log(1)) / 100
dg <- exp(log_dg)
K_renard <- 0.0034 + 0.0405 * exp(-0.5 * ((log(dg) + 1.659) / 0.7101)^2)
plot(K_renard)
writeRaster(K_renard, here::here("RUSLE_SoilGrids", "Scripts", "OUT_K_renard_dg.tif"), overwrite = TRUE)
# Subecuaciones según Anache et al. (2015), adaptadas de Sharpley & Williams
fcsand <- 0.2 + 0.3 * exp(-0.0256 * sand * (1 - silt / 100))
sl_clay <- silt / (clay + silt)
om_term <- 1 - 0.25 * om / (om + exp(3.72 - 2.95 * om))
K_sw <- fcsand * sl_clay^0.3 * om_term
# Conversión a unidades SI
K_sw_SI <- K_sw * 0.1317
plot(K_sw_SI)
writeRaster(K_sw_SI, here::here("RUSLE_SoilGrids", "Data","OUT_K_sharpley_williams.tif"), overwrite = TRUE)
M <- (silt + sand) * (100 - clay)
K_denardin <- 0.0134 + 0.0027 * M / 10000 - 0.00001 * M^2 / 1e8
plot(K_denardin)
writeRaster(K_denardin, here::here("RUSLE_SoilGrids", "Data", "OUT_K_denardin.tif"), overwrite = TRUE)
# Diámetro medio de cada fracción (μm): arena=1000, limo=26, arcilla=1
log_dg <- (sand * log(1000) + silt * log(26) + clay * log(1)) / 100
dg <- exp(log_dg)
K_renard <- 0.0034 + 0.0405 * exp(-0.5 * ((log(dg) + 1.659) / 0.7101)^2)
plot(K_renard)
writeRaster(K_renard, here::here("RUSLE_SoilGrids", "Data", "OUT_K_renard_dg.tif"), overwrite = TRUE)
# Análisis de valores faltantes por capa
na_summary <- global(is.na(stack_soil_crop), fun = "sum", na.rm = FALSE)
print("Número de celdas NA por capa (previo a reproyección):")
print(na_summary)
# Verificar si hay NAs internos
tiene_na <- any(na_summary[] > 0)
if (tiene_na) {
message("⚠️  Se detectaron valores faltantes (NA) en el stack recortado.")
} else {
message("✅  No se detectaron valores NA en el stack recortado.")
}
## Reproyección y alineación (solo si se validó el stack recortado)
if (usar_raster) {
# Reproyectar al CRS del DEM
stack_soil_proj <- project(stack_soil_crop, crs(dem), method = "bilinear")
# Interpolación de NA si existen
na_check <- global(is.na(stack_soil_proj), "sum", na.rm = FALSE)
if (any(na_check[] > 0)) {
message("⚠️  Se detectaron NA después de reproyección. Aplicando interpolación local.")
stack_soil_proj <- focal(stack_soil_proj, w = 3, fun = "mean", na.policy = "only", na.rm = TRUE)
}
# Alinear al raster DEM
stack_soil_ready <- resample(stack_soil_proj, dem, method = "bilinear")
} else {
# Reproyectar al CRS original del polígono
crs_poli <- st_crs(poli_estudio)$wkt
stack_soil_proj <- project(stack_soil_crop, crs_poli, method = "bilinear")
# Interpolación de NA si existen
na_check <- global(is.na(stack_soil_proj), "sum", na.rm = FALSE)
if (any(na_check[] > 0)) {
message("⚠️  Se detectaron NA después de reproyección. Aplicando interpolación local.")
stack_soil_proj <- focal(stack_soil_proj, w = 3, fun = "mean", na.policy = "only", na.rm = TRUE)
}
# Aplicar máscara espacial con el polígono
stack_soil_ready <- mask(stack_soil_proj, vect(poli_estudio))
}
# Extraer y convertir unidades
sand <- stack_soil_ready[["sand_0-5cm_mean"]] / 10  # g/kg → %
silt <- stack_soil_ready[["silt_0-5cm_mean"]] / 10
clay <- stack_soil_ready[["clay_0-5cm_mean"]] / 10
soc  <- stack_soil_ready[["soc_0-5cm_mean"]] / 10  # dg/kg → %
bd   <- stack_soil_ready[["bdod_0-5cm_mean"]] / 100  # cg/cm³ → g/cm³
# Materia orgánica a partir de SOC
om <- soc * 1.724
# Diámetro medio de cada fracción (μm): arena=1000, limo=26, arcilla=1
log_dg <- (sand * log(1000) + silt * log(26) + clay * log(1)) / 100
dg <- exp(log_dg)
K_renard <- 0.0034 + 0.0405 * exp(-0.5 * ((log(dg) + 1.659) / 0.7101)^2)
plot(K_renard)
writeRaster(K_renard, here::here("RUSLE_SoilGrids", "Data", "OUT_K_renard_dg.tif"), overwrite = TRUE)
M <- (silt + sand) * (100 - clay)
K_denardin <- 0.0134 + 0.0027 * M / 10000 - 0.00001 * M^2 / 1e8
plot(K_denardin)
writeRaster(K_denardin, here::here("RUSLE_SoilGrids", "Data", "OUT_K_denardin.tif"), overwrite = TRUE)
# Subecuaciones según Anache et al. (2015), adaptadas de Sharpley & Williams
fcsand <- 0.2 + 0.3 * exp(-0.0256 * sand * (1 - silt / 100))
sl_clay <- silt / (clay + silt)
om_term <- 1 - 0.25 * om / (om + exp(3.72 - 2.95 * om))
K_sw <- fcsand * sl_clay^0.3 * om_term
# Conversión a unidades SI
K_sw_SI <- K_sw * 0.1317
plot(K_sw_SI)
writeRaster(K_sw_SI, here::here("RUSLE_SoilGrids", "Data","OUT_K_sharpley_williams.tif"), overwrite = TRUE)
knitr::purl("01_rusle_k_SoilGrids.qmd")
setwd("M:/My Drive/01_TRABAJO/PROYECTOS LABORALES/01_PROYECTOS ACTIVOS/2024_SGC_DGB_SUEREC/DESARROLLO/PROYECTOS DE CODIGO/Git_SGC_SUEREC/RUSLE_SoilGrids/Scripts")
knitr::purl("01_rusle_k_SoilGrids.qmd")
# Exporta el cuaderno como script plano .R
#knitr::purl("01_rusle_k_SoilGrids.qmd")
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(
here,     # manejo de rutas relativas
sf,       # lectura y transformación de vectores espaciales (polígonos)
terra,    # manipulación de rasteres y análisis espacial
dplyr,    # manipulación de data frames y tuberías
tidyr,    # transformación entre formato ancho/largo
ggplot2   # visualización de datos (gráficas)
)
# Usamos función externa para descarga vía GDAL
source(here("RUSLE_SoilGrids", "Scripts", "00_funcion_descarga_soilgrids.R"))
stack_soil <- descargar_soilgrids_stack(
vars = c("sand", "silt", "clay", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
resolucion = c(250, 250),
ruta_vrt = here("RUSLE_SoilGrids", "Data", "OUT_SoilGrids_vrt")
)
## 4. Recorte y verificación del stack de SoilGrids (previo a reproyección)
# Definir proyección IGH usada por SoilGrids (Homosínclinal Mundial)
wkt_igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Detectar automáticamente si se usará el DEM como referencia
usar_raster <- exists("dem")
if (usar_raster) {
message("Usando raster DEM como referencia espacial.")
# 1. Extraer la extensión del DEM como polígono y asignar CRS explícitamente
dem_bbox_vect <- as.polygons(ext(dem))
crs(dem_bbox_vect) <- crs(dem)
# 2. Transformar bbox al CRS de SoilGrids (IGH)
dem_bbox_sf   <- st_as_sf(dem_bbox_vect)
dem_bbox_proj <- st_transform(dem_bbox_sf, wkt_igh) |> vect()
# 3. Recorte preliminar del stack de SoilGrids (sin reproyectar aún)
stack_soil_crop <- crop(stack_soil, dem_bbox_proj)
} else {
message("Usando polígono como referencia espacial.")
# 1. Transformar el polígono al CRS de SoilGrids (IGH)
poli_estudio_igh  <- st_transform(poli_estudio, wkt_igh)
poli_estudio_vect <- vect(poli_estudio_igh)
# 2. Recorte preliminar del stack de SoilGrids (sin reproyectar aún)
stack_soil_crop <- crop(stack_soil, poli_estudio_vect)
}
# Verificar presencia de NA internos antes de reproyección
na_resumen <- global(is.na(stack_soil_crop), "sum", na.rm = FALSE)
print("Celdas NA por capa antes de reproyección:")
print(na_resumen)
# Visualizar una capa de textura para inspección visual
plot(stack_soil_crop, main = "Capas antes de reproyección)")
# Visualizar una capa de textura para inspección visual
plot(stack_soil_crop)
