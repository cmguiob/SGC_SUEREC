igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
capas <- list()
for (v in vars) {
for (d in depths) {
for (s in stats) {
capa <- paste0(v, "_", d, "_", s)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
tif_local  <- file.path(tempdir(), paste0(capa, ".tif"))
message("Descargando y materializando: ", capa)
# Crea archivo GTiff local
result <- try({
gdal_translate(
src_dataset = vrt_remote,
dst_dataset = tif_local,
of = "GTiff",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
}, silent = TRUE)
# Lee raster materializado y añade al stack
r <- try(terra::rast(tif_local), silent = TRUE)
if (!inherits(r, "try-error")) {
names(r) <- capa
capas[[capa]] <- r
} else {
warning("No se pudo leer la capa (posible error de descarga): ", capa)
}
}
}
}
if (length(capas) == 0) stop("No se pudo cargar ninguna capa válida.")
return(terra::rast(capas))
}
stack_suelo_medias <- descargar_soilgrids_stack2(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
resolucion = c(250, 250)
)
descargar_soilgrids_wcs <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SoilGrids_WCS") {
# Requiere gdalUtilities y glue
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
# Loop principal
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/soilgrids.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=image/tiff",
"&SUBSET=long({bbox[1]},{bbox[3]})",
"&SUBSET=lat({bbox[2]},{bbox[4]})"
)
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff",
verbose = TRUE
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/soilgrids.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=image/tiff",
"&SUBSET=long({bbox[1]},{bbox[3]})",
"&SUBSET=lat({bbox[2]},{bbox[4]})"
)
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
# End point CORRECTO: cada variable tiene su propio .map
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=long({bbox[1]},{bbox[3]})",
"&SUBSET=lat({bbox[2]},{bbox[4]})",
"&SUBSETTINGCRS=urn:ogc:def:crs:EPSG::4326",
"&OUTPUTCRS=urn:ogc:def:crs:EPSG::4326"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7),
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=long({bbox[1]},{bbox[3]})",
"&SUBSET=lat({bbox[2]},{bbox[4]})",
"&SUBSETTINGCRS=urn:ogc:def:crs:EPSG::4326",
"&OUTPUTCRS=urn:ogc:def:crs:EPSG::4326"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox = c(-74.6, 4.5, -74.4, 4.7), # xmin, ymin, xmax, ymax en WGS84
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs_igh <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_igh = c(-8800000, -500000, -7400000, 1400000), # xmin, ymin, xmax, ymax en IGH
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=X({bbox_igh[1]},{bbox_igh[3]})",
"&SUBSET=Y({bbox_igh[2]},{bbox_igh[4]})",
"&SUBSETTINGCRS=http://www.opengis.net/def/crs/EPSG/0/54052",
"&OUTPUTCRS=http://www.opengis.net/def/crs/EPSG/0/54052"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs_igh(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_igh = c(-8800000, -500000, -7400000, 1400000), # Colombia ejemplo IGH
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs_igh <- function(vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_igh = c(-8800000, -500000, -7400000, 1400000), # xmin, ymin, xmax, ymax en IGH
res = 250,
out_dir = "SoilGrids_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
# Asegura que los valores NO están en notación científica
bbox_fmt <- formatC(bbox_igh, format = "f", digits = 0)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=X({bbox_fmt[1]},{bbox_fmt[3]})",
"&SUBSET=Y({bbox_fmt[2]},{bbox_fmt[4]})",
"&SUBSETTINGCRS=http://www.opengis.net/def/crs/EPSG/0/54052",
"&OUTPUTCRS=http://www.opengis.net/def/crs/EPSG/0/54052"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs_igh(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_igh = c(-8800000, -500000, -7400000, 1400000), # IGH Colombia
res = 250,
out_dir = "SG_WCS"
)
descargar_soilgrids_wcs_wgs <- function(vars, depths, stats,
bbox_wgs, res = 250, out_dir = "SG_WCS") {
if(!requireNamespace("gdalUtilities", quietly = TRUE)) install.packages("gdalUtilities")
if(!requireNamespace("glue", quietly = TRUE)) install.packages("glue")
dir.create(out_dir, showWarnings = FALSE)
require(gdalUtilities)
require(glue)
bbox_fmt <- formatC(bbox_wgs, format = "f", digits = 6)
for (v in vars) {
for (d in depths) {
for (s in stats) {
cov_id <- glue("{v}_{d}_{s}")
wcs_url <- glue(
"WCS:https://maps.isric.org/mapserv?",
"map=/map/{v}.map&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage",
"&COVERAGEID={cov_id}",
"&FORMAT=GEOTIFF_INT16",
"&SUBSET=long({bbox_fmt[1]},{bbox_fmt[3]})",
"&SUBSET=lat({bbox_fmt[2]},{bbox_fmt[4]})",
"&SUBSETTINGCRS=urn:ogc:def:crs:EPSG::4326",
"&OUTPUTCRS=urn:ogc:def:crs:EPSG::4326"
)
out_file <- file.path(out_dir, glue("{cov_id}_clip.tif"))
message(glue("Descargando: {cov_id}"))
try(
gdal_translate(
src_dataset = wcs_url,
dst_dataset = out_file,
tr = c(res, res),
of = "GTiff"
),
silent = FALSE
)
}
}
}
message("¡Descarga WCS completa! Archivos guardados en: ", out_dir)
return(invisible(list.files(out_dir, full.names = TRUE)))
}
archivos <- descargar_soilgrids_wcs_wgs(
vars = c("sand", "soc"),
depths = c("0-5cm"),
stats = c("mean"),
bbox_wgs = c(-74.6, 4.5, -74.4, 4.7),
res = 250,
out_dir = "SG_WCS"
)
# Exporta el cuaderno como script plano .R
knitr::purl("02_perfiles_agrupamiento_SoilGrids_SWAT.qmd")
knitr::purl("02_perfiles_agrupamiento_SoilGrids_SWAT.qmd")
knitr::purl("01_perfiles_zonales_SoilGrids_SWAT.qmd")
# Exporta el cuaderno como script plano .R
#knitr::purl("01_perfiles_zonales_SoilGrids_SWAT.qmd")
# Para cargar librerias se verifica pacman
if ("pacman" %in% installed.packages() == FALSE) install.packages("pacman")
# Se cargan las librerias
pacman::p_load(char = c(
"here", #manejo de rutas
"sf", #manipulación de dats espaciales
"dplyr", #procesamiento de data frames
"tidyr", #procesamient ode data frames
"remotes", #carga de librerias
"devtools", #carga de librerias
"ggplot2"  #graficación
)
)
#Instalar si es necesario
#remotes::install_github("biopsichas/SWATprepR") #prepara datos para SWAT
#devtools::install_github('tkdweber/euptf2') #dependencia, funciones de pedotransferencia
library(SWATprepR)
knitr::purl("01_perfiles_zonales_SoilGrids_SWAT.qmd")
# Exporta el cuaderno como script plano .R
#knitr::purl("01_perfiles_zonales_SoilGrids_SWAT.qmd")
# Para cargar librerias se verifica pacman
if ("pacman" %in% installed.packages() == FALSE) install.packages("pacman")
# Se cargan las librerias
pacman::p_load(char = c(
"here", #manejo de rutas
"sf", #manipulación de dats espaciales
"dplyr", #procesamiento de data frames
"tidyr", #procesamient ode data frames
"remotes", #carga de librerias
"devtools", #carga de librerias
"ggplot2"  #graficación
)
)
#Instalar si es necesario
remotes::install_github("biopsichas/SWATprepR") #prepara datos para SWAT
devtools::install_github('tkdweber/euptf2') #dependencia, funciones de pedotransferencia
library(SWATprepR)
library(euptf2)
here::here("Perfiles_SoilGrids", "Data")
#Instalar si es necesario
#remotes::install_github("biopsichas/SWATprepR") #prepara datos para SWAT
devtools::install_github('tkdweber/euptf2') #dependencia, funciones de pedotransferencia
install.packages("Rdpack")
#Instalar si es necesario
#remotes::install_github("biopsichas/SWATprepR") #prepara datos para SWAT
devtools::install_github('tkdweber/euptf2') #dependencia, funciones de pedotransferencia
#Descarga mapa de ucs armonizadas para Colombia, escala 1:100k desde Zenodo
source(here("Perfiles_SoilGrids", "Scripts", "00_funcion_descarga_ucs_armonizadas_gpkg.R"), encoding = "UTF-8")
# Exporta el cuaderno como script plano .R
#knitr::purl("01_perfiles_zonales_SoilGrids_SWAT.qmd")
# Para cargar librerias se verifica pacman
if ("pacman" %in% installed.packages() == FALSE) install.packages("pacman")
# Se cargan las librerias
pacman::p_load(char = c(
"here", #manejo de rutas
"sf", #manipulación de dats espaciales
"dplyr", #procesamiento de data frames
"tidyr", #procesamient ode data frames
"remotes", #carga de librerias
"devtools", #carga de librerias
"Rdpack", #dependencia
"ggplot2"  #graficación
)
)
#Instalar si es necesario
#remotes::install_github("biopsichas/SWATprepR") #prepara datos para SWAT
#devtools::install_github('tkdweber/euptf2') #dependencia, funciones de pedotransferencia
library(SWATprepR)
library(euptf2)
# Ajusta tamaño de letra para las gráficas que genere el script
theme(base_size = 14)
# Crea un objeto tipo función al ejecutar un  script externo
source("00_funcion_descarga_soilgrids.R")
# Se llama la función con los argumentos adaptados al proyecto
stack_suelo <- descargar_soilgrids_stack(
vars = c("bdod", "sand", "silt", "clay", "soc"),
depths = c("0-5cm", "5-15cm", "15-30cm", "60-100cm"),
stats = c("mean"),
resolucion = c(250, 250),
#define ruta de descarga y verifica si ya existen los archivos
ruta_vrt = here::here("Perfiles_SoilGrids", "Data", "OUTPUT_SoilGrids_vrt")
)
# Definir la ruta de salida
out_raster <- here("Perfiles_SoilGrids", "Data", "OUT_stack_soilgrids.tif")
# Exporta el cuaderno como script plano .R
#knitr::purl("01_perfiles_zonales_SoilGrids_SWAT.qmd")
# Para cargar librerias se verifica pacman
if ("pacman" %in% installed.packages() == FALSE) install.packages("pacman")
# Se cargan las librerias
pacman::p_load(char = c(
"here", #manejo de rutas
"sf", #manipulación de dats espaciales
"dplyr", #procesamiento de data frames
"tidyr", #procesamient ode data frames
"remotes", #carga de librerias
"devtools", #carga de librerias
"Rdpack", #dependencia
"ggplot2"  #graficación
)
)
#Instalar si es necesario
#remotes::install_github("biopsichas/SWATprepR") #prepara datos para SWAT
#devtools::install_github('tkdweber/euptf2') #dependencia, funciones de pedotransferencia
library(SWATprepR)
library(euptf2)
# Ajusta tamaño de letra para las gráficas que genere el script
theme(base_size = 14)
#Descarga mapa de ucs armonizadas para Colombia, escala 1:100k desde Zenodo
source(here("Perfiles_SoilGrids", "Scripts", "00_funcion_descarga_ucs_armonizadas_gpkg.R"), encoding = "UTF-8")
getwd()
setwd("M:/My Drive/01_TRABAJO/PROYECTOS LABORALES/01_PROYECTOS ACTIVOS/2024_SGC_DGB_SUEREC/DESARROLLO/PROYECTOS DE CODIGO/Git_SGC_SUEREC")
#Descarga mapa de ucs armonizadas para Colombia, escala 1:100k desde Zenodo
source(here("Perfiles_SoilGrids", "Scripts", "00_funcion_descarga_ucs_armonizadas_gpkg.R"), encoding = "UTF-8")
getwd()
#Descarga mapa de ucs armonizadas para Colombia, escala 1:100k desde Zenodo
source(here("Perfiles_SoilGrids", "Scripts", "00_funcion_descarga_ucs_armonizadas_gpkg.R"), encoding = "UTF-8")
