"clay",        "g/kg",            "%",           0.1,               "Dividir entre 10",
"soc",         "dg/kg",           "%",        0.01,                "Multiplicar por 10",
"bdod",        "cg/cm³",          "g/cm³",       0.01,              "Dividir entre 100",
"phh2o",       "pH x10",          "pH",          0.1,               "Dividir entre 10",
"cec",         "mmol(c)/kg",      "cmol(+)/kg",  0.1,               "Dividir entre 10",
"nitrogen",    "cg/kg",           "g/kg",        0.01,              "Dividir entre 100"
)
tabla_conversion_unidades
tabla_long_swat <- tabla_long|>
left_join(tabla_conversion_unidades, by = "property") %>%
mutate(
value_swat = if_else(!is.na(factor_conversion), value * factor_conversion, value)
) |>
select(ID, property, stat, value_swat, top, bottom)
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por profundidad de “top”
arrange(soil_id, top) |>
group_by(soil_id) |>
#  Crea layer_num = 1,2,3,… para cada soil_id
mutate(layer_num = row_number()) |>
ungroup() %>%
#  Selecciona solo columnas necesarias antes de pivote:
select(
soil_id,
layer_num,
SOL_Z = bottom,   # Profundidad máxima de ese horizonte (cm)
SAND           = sand,
SILT           = silt,
CLAY           = clay,
SOL_CBN        = soc,
SOL_BD         = bdod
)
View(perfil_wide)
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por profundidad de “top”
arrange(soil_id, top) |>
group_by(soil_id) |>
#  Crea layer_num = 1,2,3,… para cada soil_id
mutate(layer_num = row_number()) |>
ungroup() %>%
#  Selecciona solo columnas necesarias antes de pivote:
select(
soil_id,
layer_num,
SOL_Z = bottom,   # Profundidad máxima de ese horizonte (cm)
SAND           = sand,
SILT           = silt,
CLAY           = clay,
SOL_CBN        = soc,
SOL_BD         = bdod
) |># Pivota a “ancho”: cada horizoneti → columnas numeradas
pivot_wider(
names_from   = layer_num,
values_from  = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep    = ""
) |>
# Añade NLAYERS = número de capas totales por soil_id
group_by(soil_id) |>
mutate(NLAYERS = n()) %|>
ungroup()
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por profundidad de “top”
arrange(soil_id, top) |>
group_by(soil_id) |>
#  Crea layer_num = 1,2,3,… para cada soil_id
mutate(layer_num = row_number()) |>
ungroup() %>%
#  Selecciona solo columnas necesarias antes de pivote:
select(
soil_id,
layer_num,
SOL_Z = bottom,   # Profundidad máxima de ese horizonte (cm)
SAND           = sand,
SILT           = silt,
CLAY           = clay,
SOL_CBN        = soc,
SOL_BD         = bdod
) |># Pivota a “ancho”: cada horizoneti → columnas numeradas
pivot_wider(
names_from   = layer_num,
values_from  = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep    = ""
) |>
# Añade NLAYERS = número de capas totales por soil_id
group_by(soil_id) |>
mutate(NLAYERS = n()) |>
ungroup()
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por la profundidad “top” de cada capa
arrange(soil_id, top) |>
# Agrupa por cada perfil de suelo (soil_id) para numerar horizontes
group_by(soil_id) |>
#    Crea layer_num = 1,2,3… según el orden de top
mutate(layer_num = row_number()) |>
ungroup() |>
# Selecciona y renombra las columnas que SWATprepR necesita:
select(
soil_id,
layer_num,
SOL_Z   = bottom,
SAND    = sand,
SILT    = silt,
CLAY    = clay,
SOL_CBN = soc,
SOL_BD  = bdod
) %>%
# Transforma de “larga” a “ancha”: cada layer_num pasa a columnas numeradas
pivot_wider(
names_from  = layer_num,
values_from = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep   = ""
) |>
# Agrupa nuevamente para contar cuántas capas hay por perfil
group_by(soil_id) %>%
#    NLAYERS = número total de horizontes que tenía cada soil_id
mutate(NLAYERS = n()) %>%
ungroup()
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por la profundidad “top” de cada capa
arrange(soil_id, top) |>
# Agrupa por cada perfil de suelo (soil_id) para numerar horizontes
group_by(soil_id) |>
#    Crea layer_num = 1,2,3… según el orden de top
mutate(layer_num = row_number()) |>
ungroup() |>
# Selecciona y renombra las columnas que SWATprepR necesita:
select(
soil_id,
layer_num,
SOL_Z   = bottom,
SAND    = sand,
SILT    = silt,
CLAY    = clay,
SOL_CBN = soc,
SOL_BD  = bdod
) %>%
# Transforma de “larga” a “ancha”: cada layer_num pasa a columnas numeradas
pivot_wider(
names_from  = layer_num,
values_from = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep   = ""
) |>
# Agrupa nuevamente para contar cuántas capas hay por perfil
group_by(soil_id) %>%
#    NLAYERS = número total de horizontes que tenía cada soil_id
mutate(NLAYERS = n()) %>%
ungroup()
View(perfil_wide)
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por la profundidad “top” de cada capa
arrange(soil_id, top) |>
# Agrupa por cada perfil de suelo (soil_id) para numerar horizontes
group_by(soil_id) |>
mutate(layer_num = row_number(), #Crea layer_num = 1,2,3… según el orden de top
NLAYERS   = n(),) |> # cuenta horizontes por soil_id
ungroup() |>
# Selecciona y renombra las columnas que SWATprepR necesita:
select(
soil_id,
layer_num,
SOL_Z   = bottom,
SAND    = sand,
SILT    = silt,
CLAY    = clay,
SOL_CBN = soc,
SOL_BD  = bdod
) |>
# Transforma de “larga” a “ancha”: cada layer_num pasa a columnas numeradas
pivot_wider(
names_from  = layer_num,
values_from = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep   = ""
)
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por la profundidad “top” de cada capa
arrange(soil_id, top) |>
# Agrupa por cada perfil de suelo (soil_id) para numerar horizontes
group_by(soil_id) |>
mutate(layer_num = row_number(), #Crea layer_num = 1,2,3… según el orden de top
NLAYERS   = n(),) |> # cuenta horizontes por soil_id
ungroup() |>
# Selecciona y renombra las columnas que SWATprepR necesita:
select(
soil_id,
layer_num,
NLAYERS,
SOL_Z   = bottom,
SAND    = sand,
SILT    = silt,
CLAY    = clay,
SOL_CBN = soc,
SOL_BD  = bdod
) |>
# Transforma de “larga” a “ancha”: cada layer_num pasa a columnas numeradas
pivot_wider(
names_from  = layer_num,
values_from = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep   = ""
)
usersoil_tbl <- get_usersoil_table(
perfil_wide,
hsg         = FALSE,   # TRUE si tienes datos confiables de HYDGRP para sobreescribir
keep_values = FALSE,   # FALSE = usa PTF para SOL_BD (pero como SOL_BD# existe, se respetará)
nb_lyr      = 4        # número de horizontes por perfil
)
# Escribe “perfil_wide” a CSV en archivo temporal para que get_usersoil_table() lo lea:
ruta_temp <- tempfile(pattern = "perfil_wide_", fileext = ".csv")
write.csv(
perfil_wide,
ruta_temp,
row.names = FALSE,
quote     = FALSE
)
# 3. Llama a get_usersoil_table() pasándole la ruta del CSV:
usersoil_tbl <- get_usersoil_table(
ruta_temp,         # ← ahora sí es una cadena (path al CSV)
hsg         = FALSE,
keep_values = FALSE,
nb_lyr      = 4    # número de horizontes por perfil
)
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por la profundidad “top” de cada capa
arrange(soil_id, top) |>
# Agrupa por cada perfil de suelo (soil_id) para numerar horizontes
group_by(soil_id) |>
mutate(layer_num = row_number(), #Crea layer_num = 1,2,3… según el orden de top
NLAYERS   = n(),) |> # cuenta horizontes por soil_id
ungroup() |>
# Selecciona y renombra las columnas que SWATprepR necesita:
select(
SNAM    = soil_id,
layer_num,
NLAYERS,
SOL_Z   = bottom,
SAND    = sand,
SILT    = silt,
CLAY    = clay,
SOL_CBN = soc,
SOL_BD  = bdod
) |>
# Transforma de “larga” a “ancha”: cada layer_num pasa a columnas numeradas
pivot_wider(
names_from  = layer_num,
values_from = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep   = ""
)
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por la profundidad “top” de cada capa
arrange(soil_id, top) |>
# Agrupa por cada perfil de suelo (soil_id) para numerar horizontes
group_by(soil_id) |>
mutate(layer_num = row_number(), #Crea layer_num = 1,2,3… según el orden de top
NLAYERS   = n(),) |> # cuenta horizontes por soil_id
ungroup() |>
# Selecciona y renombra las columnas que SWATprepR necesita:
select(
SNAM    = soil_id,
layer_num,
NLAYERS,
SOL_Z   = bottom,
SAND    = sand,
SILT    = silt,
CLAY    = clay,
SOL_CBN = soc,
SOL_BD  = bdod
) |>
# Transforma de “larga” a “ancha”: cada layer_num pasa a columnas numeradas
pivot_wider(
names_from  = layer_num,
values_from = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep   = ""
)
# Escribe “perfil_wide” a CSV en archivo temporal para que get_usersoil_table() lo lea:
ruta_temp <- tempfile(pattern = "perfil_wide_", fileext = ".csv")
write.csv(
perfil_wide,
ruta_temp,
row.names = FALSE,
quote     = FALSE
)
# 3. Llama a get_usersoil_table() pasándole la ruta del CSV:
usersoil_tbl <- get_usersoil_table(
ruta_temp,         # ← ahora sí es una cadena (path al CSV)
hsg         = FALSE,
keep_values = FALSE,
nb_lyr      = 4    # número de horizontes por perfil
)
write.csv(
perfil_wide,
ruta_temp,
row.names = FALSE,
quote     = FALSE
)
# 3. Llama a get_usersoil_table() pasándole la ruta del CSV:
usersoil_tbl <- get_usersoil_table(
ruta_temp,         # ← ahora sí es una cadena (path al CSV)
hsg         = FALSE,
keep_values = FALSE,
nb_lyr      = 4    # número de horizontes por perfil
)
summary(perfil_wide)
perfil_wide %>%
filter(if_any(
starts_with("SOL_Z"),   ~ is.na(.x)
) | if_any(
starts_with("SAND"),    ~ is.na(.x)
) | if_any(
starts_with("SILT"),    ~ is.na(.x)
) | if_any(
starts_with("CLAY"),    ~ is.na(.x)
) | if_any(
starts_with("SOL_CBN"), ~ is.na(.x)
) | if_any(
starts_with("SOL_BD"),  ~ is.na(.x)
))
str(tabla_zonal)
perfil_wide %>%
filter(if_any(
starts_with("SOL_Z"),   ~ is.na(.x)
) | if_any(
starts_with("SAND"),    ~ is.na(.x)
) | if_any(
starts_with("SILT"),    ~ is.na(.x)
) | if_any(
starts_with("CLAY"),    ~ is.na(.x)
) | if_any(
starts_with("SOL_CBN"), ~ is.na(.x)
) | if_any(
starts_with("SOL_BD"),  ~ is.na(.x)
))
summary(tabla_zonal)
View(tabla_long_swat)
tabla_long |> filter(is.na(value_swat))
View(tabla_long)
tabla_long |> filter(is.na(value))
# Crea soil_id único (con sufijo, si hay duplicados)
#tabla_zonal_id <- tabla_zonal |>
# mutate(soil_id = make.unique(soil_id))
# Pivot a formato largo
tabla_long <- tabla_zonal |>
pivot_longer(
cols = -c(ID),  # Deja fuera ID (solo pivot propiedades)
names_to = c("property", "depth", "stat"),
names_pattern = "([a-z]+)_([0-9]+-[0-9]+)cm_(mean|Q0.5|Q0.05|Q0.95|uncertainty)"
) |>
mutate(
top = as.numeric(sub("([0-9]+)-([0-9]+)", "\\1", depth)),
bottom = as.numeric(sub("([0-9]+)-([0-9]+)", "\\2", depth))
) |>
select(ID, property, stat, value, top, bottom) |>
drop_na() #elimina NA de cuerpos de agua
# Tabla de conversión: de unidad de SoilGrids a unidad SWAT
# Solo propiedades que interesan a SWAT
tabla_conversion_unidades <- tibble::tribble(
~property,     ~unidad_soilgrids, ~unidad_swat, ~factor_conversion, ~nota,
"sand",        "g/kg",            "%",           0.1,               "Dividir entre 10",
"silt",        "g/kg",            "%",           0.1,               "Dividir entre 10",
"clay",        "g/kg",            "%",           0.1,               "Dividir entre 10",
"soc",         "dg/kg",           "%",           0.01,              "Dividir entre 100",
"bdod",        "cg/cm³",          "g/cm³",       0.01,              "Dividir entre 100",
"phh2o",       "pH x10",          "pH",          0.1,               "Dividir entre 10",
"cec",         "mmol(c)/kg",      "cmol(+)/kg",  0.1,               "Dividir entre 10",
"nitrogen",    "cg/kg",           "g/kg",        0.01,              "Dividir entre 100"
)
tabla_conversion_unidades
tabla_long_swat <- tabla_long|>
left_join(tabla_conversion_unidades, by = "property") %>%
mutate(
value_swat = if_else(!is.na(factor_conversion), value * factor_conversion, value)
) |>
select(ID, property, stat, value_swat, top, bottom)
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por la profundidad “top” de cada capa
arrange(soil_id, top) |>
# Agrupa por cada perfil de suelo (soil_id) para numerar horizontes
group_by(soil_id) |>
mutate(layer_num = row_number(), #Crea layer_num = 1,2,3… según el orden de top
NLAYERS   = n(),) |> # cuenta horizontes por soil_id
ungroup() |>
# Selecciona y renombra las columnas que SWATprepR necesita:
select(
SNAM    = soil_id,
layer_num,
NLAYERS,
SOL_Z   = bottom,
SAND    = sand,
SILT    = silt,
CLAY    = clay,
SOL_CBN = soc,
SOL_BD  = bdod
) |>
# Transforma de “larga” a “ancha”: cada layer_num pasa a columnas numeradas
pivot_wider(
names_from  = layer_num,
values_from = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep   = ""
)
# Escribe “perfil_wide” a CSV en archivo temporal para que get_usersoil_table() lo lea:
ruta_temp <- tempfile(pattern = "perfil_wide_", fileext = ".csv")
write.csv(
perfil_wide,
ruta_temp,
row.names = FALSE,
quote     = FALSE
)
# 3. Llama a get_usersoil_table() pasándole la ruta del CSV:
usersoil_tbl <- get_usersoil_table(
ruta_temp,         # ← ahora sí es una cadena (path al CSV)
hsg         = FALSE,
keep_values = FALSE,
nb_lyr      = 4    # número de horizontes por perfil
)
summary(perfil_wide)
tabla_long_swat |> summary()
# Filtra fatos innecesarios, agrega identificador único y reordena columnas
tabla_wide_swat <- tabla_long_swat |>
filter(stat == "mean") |>
select(ID, top, bottom, property, value_swat) %>%
pivot_wider(names_from = property, values_from = value_swat) |>
mutate(soil_id = sprintf("SOIL_%04d", ID) ) |>   # Crea IDs
select(soil_id, top, bottom, sand, silt, clay, soc, bdod)
summary(tabla_wide_swat)
perfil_wide <- tabla_wide_swat %>%
# Ordena por soil_id y por la profundidad “top” de cada capa
arrange(soil_id, top) |>
# Agrupa por cada perfil de suelo (soil_id) para numerar horizontes
group_by(soil_id) |>
mutate(layer_num = row_number(), #Crea layer_num = 1,2,3… según el orden de top
NLAYERS   = n(),) |> # cuenta horizontes por soil_id
ungroup() |>
# Selecciona y renombra las columnas que SWATprepR necesita:
select(
SNAM    = soil_id,
layer_num,
NLAYERS,
SOL_Z   = bottom,
SAND    = sand,
SILT    = silt,
CLAY    = clay,
SOL_CBN = soc,
SOL_BD  = bdod
) |>
# Transforma de “larga” a “ancha”: cada layer_num pasa a columnas numeradas
pivot_wider(
names_from  = layer_num,
values_from = c(SOL_Z, SAND, SILT, CLAY, SOL_CBN, SOL_BD),
names_sep   = ""
)
summary(perfil_wide)
write.csv(
perfil_wide,
ruta_temp,
row.names = FALSE,
quote     = FALSE
)
# 3. Llama a get_usersoil_table() pasándole la ruta del CSV:
usersoil_tbl <- get_usersoil_table(
ruta_temp,         # ← ahora sí es una cadena (path al CSV)
hsg         = FALSE,
keep_values = FALSE,
nb_lyr      = 4    # número de horizontes por perfil
)
devtools::install_github('tkdweber/euptf2')
# Exporta el cuaderno como script plano .R
#knitr::purl("01_perfiles_zonales_SoilGrids_SWAT.qmd")
# Para cargar librerias se verifica pacman
if ("pacman" %in% installed.packages() == FALSE) install.packages("pacman")
# Se cargan las librerias
pacman::p_load(char = c(
"here", #manejo de rutas
"sf", #manipulación de dats espaciales
"dplyr", #procesamiento de data frames
"tidyr", #procesamient ode data frames
"remotes", #carga de librerias
"devtools", #carga de librerias
"ggplot2"  #graficación
)
)
remotes::install_github("biopsichas/SWATprepR")
devtools::install_github('tkdweber/euptf2')
library(SWATprepR)
library(euptf2)
# 3. Llama a get_usersoil_table() pasándole la ruta del CSV:
usersoil_tbl <- get_usersoil_table(
ruta_temp,         # ← ahora sí es una cadena (path al CSV)
hsg         = FALSE,
keep_values = FALSE,
nb_lyr      = 4    # número de horizontes por perfil
)
devtools::install_github('tkdweber/euptf2')
install.packages("Rdpack")
devtools::install_github('tkdweber/euptf2')
library(euptf2)
# 3. Llama a get_usersoil_table() pasándole la ruta del CSV:
usersoil_tbl <- get_usersoil_table(
ruta_temp,         # ← ahora sí es una cadena (path al CSV)
hsg         = FALSE,
keep_values = FALSE,
nb_lyr      = 4    # número de horizontes por perfil
)
View(usersoil_tbl)
#Se verifica
head(usersoil_tbl)
write.csv(usersoil_tbl, here("Perfiles_SoilGrids", "Data","tabla_usersoil"))
write.csv(usersoil_tbl, here("Perfiles_SoilGrids", "Data","tabla_usersoil.csv"))
getwd()
setwd("~/2024_SGC_SUEREC/PROYECTOS DE CODIGO/SGC_SUEREC")
write.csv(usersoil_tbl, here("Perfiles_SoilGrids", "Data","tabla_usersoil.csv"))
here_iam
getwd()
write.csv(usersoil_tbl, here("Perfiles_SoilGrids", "Data", "tabla_usersoil.csv"))
write.csv(usersoil_tbl, here::here("Perfiles_SoilGrids", "Data", "tabla_usersoil.csv"))
